{"uid":"f4dd62b09b61e611","name":"test_getDailyInventory_withEmptyInventory_returns200AndData[User.SUPERUSER-monthly-item_type-delivered]","fullName":"tests.dashboards.test_inventory.TestGetDailyInventory#test_getDailyInventory_withEmptyInventory_returns200AndData","historyId":"a472eb0f42ac5de4f6e0eab7a75efe6c","time":{"start":1704508521322,"stop":1704508521401,"duration":79},"status":"broken","statusMessage":"AttributeError: 'NoneType' object has no attribute 'id'","statusTrace":"self = <test_inventory.TestGetDailyInventory object at 0x7fb10a65da50>\nclient = <core.http_client.HTTPClient object at 0x7fb10a0ab4d0>\nuser = <User.SUPERUSER: 'superuser'>\ncreate_fake_facility = <function create_fake_facility.<locals>._fixture at 0x7fb109d95620>\ndaily_inventory_type = 'delivered', inventory_base_filter = 'item_type'\nfrequency = 'monthly'\n\n    @pytest.mark.parametrize('daily_inventory_type', ['cart_build', 'delivered'])\n    @pytest.mark.parametrize('inventory_base_filter', ['metro_config', 'item_type'])\n    @pytest.mark.parametrize('frequency', ['daily', 'weekly', 'monthly'])\n    @users(User.SUPERUSER)\n    def test_getDailyInventory_withEmptyInventory_returns200AndData(\n        self, client, user,\n        create_fake_facility,\n        daily_inventory_type, inventory_base_filter, frequency\n    ):\n        # Arrange\n>       facility_payload, facility_response, facility_model = create_fake_facility()\n\ntests/dashboards/test_inventory.py:97: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nno_of_customers = 0, kwargs = {}\npayload = {'address_line1': '193 Reynolds Square\\nPamelastad, TN 37688', 'address_line2': '768 Eric Coves\\nNew Troy, MT 62822', 'city': 'Lambertmouth', 'country': 'Saint Martin', ...}\nresponse = <Response [400]>\nmodel = ErrorResponse(status=False, message='Error', data=None, error={'name': ['facility with this name already exists.']})\n\n    def _fixture(no_of_customers: int = 0, **kwargs):\n        # Create customers\n        for _ in range(no_of_customers):\n            payload = data.fake.model.customer()  # Request body_str JSON\n            response, model = CustomerAPI(client).create_customer(data=payload)\n            customers.append(model.data.id)\n    \n        # Create facility\n        payload = data.fake.model.facility(customers=customers, **kwargs)  # Request body_str JSON\n        response, model = FacilityAPI(client).create_facility(data=payload)\n        nonlocal facility_id\n>       facility_id = model.data.id\nE       AttributeError: 'NoneType' object has no attribute 'id'\n\nfixtures/facility.py:24: AttributeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":3,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1704507813118,"stop":1704507813132,"duration":14},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"client","time":{"start":1704507813133,"stop":1704507813133,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"users","time":{"start":1704508521321,"stop":1704508521321,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"create_fake_facility","time":{"start":1704508521322,"stop":1704508521322,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"create_fake_facility::0","time":{"start":1704508521408,"stop":1704508521487,"duration":79},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"client::0","time":{"start":1704508642289,"stop":1704508642290,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests.dashboards"},{"name":"suite","value":"test_inventory"},{"name":"subSuite","value":"TestGetDailyInventory"},{"name":"host","value":"fv-az565-336"},{"name":"thread","value":"2161-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.dashboards.test_inventory"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"daily_inventory_type","value":"'delivered'"},{"name":"frequency","value":"'monthly'"},{"name":"inventory_base_filter","value":"'item_type'"},{"name":"user","value":"<User.SUPERUSER: 'superuser'>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"21737d46aee48e90","status":"broken","statusDetails":"AttributeError: 'NoneType' object has no attribute 'id'","time":{"start":1704508521159,"stop":1704508521240,"duration":81}},{"uid":"38885d2d5b68f526","status":"broken","statusDetails":"AttributeError: 'NoneType' object has no attribute 'id'","time":{"start":1704508520994,"stop":1704508521070,"duration":76}},{"uid":"8b80fc36548d6dc2","status":"broken","statusDetails":"AttributeError: 'NoneType' object has no attribute 'id'","time":{"start":1704508520818,"stop":1704508520897,"duration":79}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":3,"skipped":0,"passed":4,"unknown":0,"total":7},"items":[{"uid":"e4577cc54fbd9bd7","reportUrl":"https://Rustam-Z.github.io/disney-test-api-taf/238//#testresult/e4577cc54fbd9bd7","status":"broken","statusDetails":"ValueError: Response body is not a JSON object.","time":{"start":1704422959412,"stop":1704423199514,"duration":240102}},{"uid":"b60224ecb5d22a18","reportUrl":"https://Rustam-Z.github.io/disney-test-api-taf/237//#testresult/b60224ecb5d22a18","status":"broken","statusDetails":"ValueError: Response body is not a JSON object.","time":{"start":1704336517786,"stop":1704336758003,"duration":240217}},{"uid":"39ec4ad578324f63","reportUrl":"https://Rustam-Z.github.io/disney-test-api-taf/236//#testresult/39ec4ad578324f63","status":"passed","time":{"start":1704249318984,"stop":1704249554626,"duration":235642}},{"uid":"3190c40a9358ca80","reportUrl":"https://Rustam-Z.github.io/disney-test-api-taf/235//#testresult/3190c40a9358ca80","status":"passed","time":{"start":1704163027251,"stop":1704163265981,"duration":238730}},{"uid":"9e8d79b635d6fd1d","reportUrl":"https://Rustam-Z.github.io/disney-test-api-taf/234//#testresult/9e8d79b635d6fd1d","status":"passed","time":{"start":1704076877975,"stop":1704077117590,"duration":239615}},{"uid":"e53b04a36c0b0b1d","reportUrl":"https://Rustam-Z.github.io/disney-test-api-taf/233//#testresult/e53b04a36c0b0b1d","status":"passed","time":{"start":1703990224732,"stop":1703990462576,"duration":237844}}]},"tags":[]},"source":"f4dd62b09b61e611.json","parameterValues":["'delivered'","'monthly'","'item_type'","<User.SUPERUSER: 'superuser'>"]}