{"uid":"5dc1929563d161a5","name":"test_getDailyInventory_withEmptyInventory_returns200AndData[User.SUPERUSER-monthly-item_type-cart_build]","fullName":"tests.dashboards.test_inventory.TestGetDailyInventory#test_getDailyInventory_withEmptyInventory_returns200AndData","historyId":"8e0008e16ced5ed8b3064e01b2794efe","time":{"start":1709606346492,"stop":1709606586586,"duration":240094},"status":"broken","statusMessage":"ValueError: Response body is not a JSON object.","statusTrace":"self = <Response [504]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n../../../.cache/pypoetry/virtualenvs/disney-test-api-taf-A9L5E0vM-py3.11/lib/python3.11/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ns = '504.0 GatewayTimeout', cls = None, object_hook = None, parse_float = None\nparse_int = None, parse_constant = None, object_pairs_hook = None, kw = {}\n\n    def loads(s, *, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n                raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\n            s = s.decode(detect_encoding(s), 'surrogatepass')\n    \n        if (cls is None and object_hook is None and\n                parse_int is None and parse_float is None and\n                parse_constant is None and object_pairs_hook is None and not kw):\n>           return _default_decoder.decode(s)\n\n/opt/hostedtoolcache/Python/3.11.8/x64/lib/python3.11/json/__init__.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f4d2700a9d0>\ns = '504.0 GatewayTimeout'\n_w = <built-in method match of re.Pattern object at 0x7f4d26b9f5e0>\n\n    def decode(self, s, _w=WHITESPACE.match):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` instance\n        containing a JSON document).\n    \n        \"\"\"\n        obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n        end = _w(s, end).end()\n        if end != len(s):\n>           raise JSONDecodeError(\"Extra data\", s, end)\nE           json.decoder.JSONDecodeError: Extra data: line 1 column 7 (char 6)\n\n/opt/hostedtoolcache/Python/3.11.8/x64/lib/python3.11/json/decoder.py:340: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <core.asserters.APIResponse object at 0x7f4d2495a510>\n\n    def assert_body_is_json(self):\n        try:\n>           self.body_json()\n\ncore/asserters.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <core.asserters.APIResponse object at 0x7f4d2495a510>\n\n    def body_json(self):\n>       return self.response.json()\n\ncore/asserters.py:14: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [504]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Extra data: line 1 column 7 (char 6)\n\n../../../.cache/pypoetry/virtualenvs/disney-test-api-taf-A9L5E0vM-py3.11/lib/python3.11/site-packages/requests/models.py:975: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_inventory.TestGetDailyInventory object at 0x7f4d2535ae10>\nclient = <core.http_client.HTTPClient object at 0x7f4d2413aad0>\nuser = <User.SUPERUSER: 'superuser'>\ncreate_fake_facility = <function create_fake_facility.<locals>._fixture at 0x7f4d24a1dc60>\ndaily_inventory_type = 'cart_build', inventory_base_filter = 'item_type'\nfrequency = 'monthly'\n\n    @pytest.mark.parametrize('daily_inventory_type', ['cart_build', 'delivered'])\n    @pytest.mark.parametrize('inventory_base_filter', ['metro_config', 'item_type'])\n    @pytest.mark.parametrize('frequency', ['daily', 'weekly', 'monthly'])\n    @users(User.SUPERUSER)\n    def test_getDailyInventory_withEmptyInventory_returns200AndData(\n        self, client, user,\n        create_fake_facility,\n        daily_inventory_type, inventory_base_filter, frequency\n    ):\n        # Arrange\n        facility_payload, facility_response, facility_model = create_fake_facility()\n        facility_id = facility_model.data.id\n    \n        # Act\n        params = {\n            Param.FACILITY.value: facility_id,\n            Param.DAILY_INVENTORY_TYPE.value: daily_inventory_type,\n            Param.INVENTORY_BASE_FILTER.value: inventory_base_filter,\n            Param.FREQUENCY.value: frequency\n        }\n>       response, model = InventoryDashboardAPI(client).get_daily_inventory(params)\n\ntests/dashboards/test_inventory.py:107: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/endpoints/dashboards/inventory_api.py:66: in get_daily_inventory\n    response = self.client.get(path, params=params, **kwargs)\ncore/http_client.py:57: in get\n    APIResponse(response).assert_body_is_json()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <core.asserters.APIResponse object at 0x7f4d2495a510>\n\n    def assert_body_is_json(self):\n        try:\n            self.body_json()\n        except JSONDecodeError:\n>           raise ValueError(f'Response body is not a JSON object.')\nE           ValueError: Response body is not a JSON object.\n\ncore/asserters.py:20: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":3,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1709605039739,"stop":1709605039753,"duration":14},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"client","time":{"start":1709605039753,"stop":1709605039753,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"create_fake_facility","time":{"start":1709606346491,"stop":1709606346491,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"users","time":{"start":1709606346491,"stop":1709606346491,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"create_fake_facility::0","time":{"start":1709606586618,"stop":1709606586726,"duration":108},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"client::0","time":{"start":1709607640386,"stop":1709607640387,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests.dashboards"},{"name":"suite","value":"test_inventory"},{"name":"subSuite","value":"TestGetDailyInventory"},{"name":"host","value":"fv-az248-658"},{"name":"thread","value":"2197-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.dashboards.test_inventory"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"daily_inventory_type","value":"'cart_build'"},{"name":"frequency","value":"'monthly'"},{"name":"inventory_base_filter","value":"'item_type'"},{"name":"user","value":"<User.SUPERUSER: 'superuser'>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"6bd7813e3eab19cd","status":"broken","statusDetails":"ValueError: Response body is not a JSON object.","time":{"start":1709606106252,"stop":1709606346338,"duration":240086}},{"uid":"d4d4af4eae6933c5","status":"broken","statusDetails":"ValueError: Response body is not a JSON object.","time":{"start":1709605865989,"stop":1709606106082,"duration":240093}},{"uid":"eeb2cdc38243408a","status":"broken","statusDetails":"ValueError: Response body is not a JSON object.","time":{"start":1709605625697,"stop":1709605865790,"duration":240093}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":7,"skipped":0,"passed":0,"unknown":0,"total":7},"items":[{"uid":"117d6d28d29b71f7","reportUrl":"https://Rustam-Z.github.io/disney-test-api-taf/297//#testresult/117d6d28d29b71f7","status":"broken","statusDetails":"ValueError: Response body is not a JSON object.","time":{"start":1709522406893,"stop":1709522647075,"duration":240182}},{"uid":"69784005cf085188","reportUrl":"https://Rustam-Z.github.io/disney-test-api-taf/296//#testresult/69784005cf085188","status":"broken","statusDetails":"ValueError: Response body is not a JSON object.","time":{"start":1709433704809,"stop":1709433945004,"duration":240195}},{"uid":"4877b87b9ad6be13","reportUrl":"https://Rustam-Z.github.io/disney-test-api-taf/295//#testresult/4877b87b9ad6be13","status":"broken","statusDetails":"ValueError: Response body is not a JSON object.","time":{"start":1709346816114,"stop":1709347056187,"duration":240073}},{"uid":"861cd2496aaf220b","reportUrl":"https://Rustam-Z.github.io/disney-test-api-taf/294//#testresult/861cd2496aaf220b","status":"broken","statusDetails":"ValueError: Response body is not a JSON object.","time":{"start":1709260835033,"stop":1709261075176,"duration":240143}},{"uid":"3ce8dbe11c3554cd","reportUrl":"https://Rustam-Z.github.io/disney-test-api-taf/293//#testresult/3ce8dbe11c3554cd","status":"broken","statusDetails":"ValueError: Response body is not a JSON object.","time":{"start":1709173823555,"stop":1709174063749,"duration":240194}},{"uid":"9f8607207d89d8e0","reportUrl":"https://Rustam-Z.github.io/disney-test-api-taf/292//#testresult/9f8607207d89d8e0","status":"broken","statusDetails":"ValueError: Response body is not a JSON object.","time":{"start":1709088000593,"stop":1709088240792,"duration":240199}}]},"tags":[]},"source":"5dc1929563d161a5.json","parameterValues":["'cart_build'","'monthly'","'item_type'","<User.SUPERUSER: 'superuser'>"]}