{"uid":"43d2e6c4bbb93dfd","name":"test_getUnassignedOrders_withNotExistingFacility_returns400AndError[User.SUPERUSER]","fullName":"tests.order.test_driver_assignment.TestGetUnassignedOrders#test_getUnassignedOrders_withNotExistingFacility_returns400AndError","historyId":"1befe6020f3e21ddacedbc1913309cbc","time":{"start":1702953615458,"stop":1702953615520,"duration":62},"status":"failed","statusMessage":"AssertionError: Status code is different than expected. Actual: 200, expected: 400. Response payload: {\"status\":true,\"message\":\"Successfully\",\"data\":{\"results\":[]},\"error\":null}","statusTrace":"self = <test_driver_assignment.TestGetUnassignedOrders object at 0x7f6515fd4bd0>\nclient = <core.http_client.HTTPClient object at 0x7f6515f71850>\nuser = <User.SUPERUSER: 'superuser'>\n\n    @users(User.SUPERUSER)\n    def test_getUnassignedOrders_withNotExistingFacility_returns400AndError(self, client, user):\n        # Arrange\n        current_time = datetime.now().strftime('%Y-%m-%dT%H:%M:%S.%fZ')\n        params = {\n            Param.DATE_START_TIME_UTC.value: current_time,\n            Param.FACILITY.value: data.fake.pyint()  # Not existing facility\n        }\n    \n        # Act\n        response, model = DriverAssignmentAPI(client).get_unassigned_orders(params=params)\n    \n        # Assert\n>       APIResponse(response).assert_status(400)\n\ntests/order/test_driver_assignment.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <core.asserters.APIResponse object at 0x7f6515e6e6d0>, status_code = 400\n\n    def assert_status(self, status_code: int):\n>       assert self.response.status_code == status_code, \\\n            f'{AssertionMessage.WRONG_STATUS_CODE.value} ' \\\n            f'Actual: {self.response.status_code}, ' \\\n            f'expected: {status_code}. ' \\\n            f'Response payload: {self.body_str()}'\nE       AssertionError: Status code is different than expected. Actual: 200, expected: 400. Response payload: {\"status\":true,\"message\":\"Successfully\",\"data\":{\"results\":[]},\"error\":null}\n\ncore/asserters.py:25: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":3,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1702952745898,"stop":1702952745913,"duration":15},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"client","time":{"start":1702952745913,"stop":1702952745913,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"users","time":{"start":1702953615458,"stop":1702953615458,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"client::0","time":{"start":1702953661553,"stop":1702953661554,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests.order"},{"name":"suite","value":"test_driver_assignment"},{"name":"subSuite","value":"TestGetUnassignedOrders"},{"name":"host","value":"fv-az402-312"},{"name":"thread","value":"2259-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.order.test_driver_assignment"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"user","value":"<User.SUPERUSER: 'superuser'>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"68f5e6c0a2abbed6","status":"failed","statusDetails":"AssertionError: Status code is different than expected. Actual: 200, expected: 400. Response payload: {\"status\":true,\"message\":\"Successfully\",\"data\":{\"results\":[]},\"error\":null}","time":{"start":1702953615392,"stop":1702953615450,"duration":58}},{"uid":"725fcbc6b11a8c68","status":"failed","statusDetails":"AssertionError: Status code is different than expected. Actual: 200, expected: 400. Response payload: {\"status\":true,\"message\":\"Successfully\",\"data\":{\"results\":[]},\"error\":null}","time":{"start":1702953615324,"stop":1702953615385,"duration":61}},{"uid":"916b5e5a085c9599","status":"failed","statusDetails":"AssertionError: Status code is different than expected. Actual: 200, expected: 400. Response payload: {\"status\":true,\"message\":\"Successfully\",\"data\":{\"results\":[]},\"error\":null}","time":{"start":1702953615250,"stop":1702953615316,"duration":66}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":4,"unknown":0,"total":5},"items":[{"uid":"304ae809e8ac7b2f","reportUrl":"https://Rustam-Z.github.io/disney-test-api-taf/220//#testresult/304ae809e8ac7b2f","status":"passed","time":{"start":1702867272619,"stop":1702867272673,"duration":54}},{"uid":"971178a1c781f20d","reportUrl":"https://Rustam-Z.github.io/disney-test-api-taf/219//#testresult/971178a1c781f20d","status":"passed","time":{"start":1702780920051,"stop":1702780920132,"duration":81}},{"uid":"4d1769a22c9c416","reportUrl":"https://Rustam-Z.github.io/disney-test-api-taf/218//#testresult/4d1769a22c9c416","status":"passed","time":{"start":1702694318422,"stop":1702694318505,"duration":83}},{"uid":"9405bd34efc0cc8d","reportUrl":"https://Rustam-Z.github.io/disney-test-api-taf/217//#testresult/9405bd34efc0cc8d","status":"passed","time":{"start":1702608108557,"stop":1702608108612,"duration":55}}]},"tags":[]},"source":"43d2e6c4bbb93dfd.json","parameterValues":["<User.SUPERUSER: 'superuser'>"]}