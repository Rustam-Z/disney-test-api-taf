{"uid":"94d2528478013c79","name":"test_getMetroList_withWrongOrder_returns400AndError[User.SUPERUSER]","fullName":"tests.staging.test_staging.TestGetMetroList#test_getMetroList_withWrongOrder_returns400AndError","historyId":"f331ea8e7efded2ffb7d32a2391108cf","time":{"start":1707187625743,"stop":1707187625804,"duration":61},"status":"failed","statusMessage":"AssertionError: Status code is different than expected. Actual: 200, expected: 400. Response payload: {\"status\":true,\"message\":\"Successfully\",\"data\":{\"results\":[]},\"error\":null}","statusTrace":"self = <test_staging.TestGetMetroList object at 0x7f3101bfb1d0>\nclient = <core.http_client.HTTPClient object at 0x7f3101b38ad0>\nuser = <User.SUPERUSER: 'superuser'>\n\n    @users(User.SUPERUSER)\n    def test_getMetroList_withWrongOrder_returns400AndError(self, client, user):\n        # Arrange: create order, assign metros\n        params = {\n            Param.ORDER_ID.value: data.fake.pyint()\n        }\n    \n        # Act\n        response, model = StagingAPI(client).get_metro_list(params)\n    \n        # Assert\n>       APIResponse(response).assert_status(400)\n\ntests/staging/test_staging.py:229: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <core.asserters.APIResponse object at 0x7f3101673dd0>, status_code = 400\n\n    def assert_status(self, status_code: int):\n>       assert self.response.status_code == status_code, \\\n            f'{AssertionMessage.WRONG_STATUS_CODE.value} ' \\\n            f'Actual: {self.response.status_code}, ' \\\n            f'expected: {status_code}. ' \\\n            f'Response payload: {self.body_str()}'\nE       AssertionError: Status code is different than expected. Actual: 200, expected: 400. Response payload: {\"status\":true,\"message\":\"Successfully\",\"data\":{\"results\":[]},\"error\":null}\n\ncore/asserters.py:25: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1707185870714,"stop":1707185870727,"duration":13},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"client","time":{"start":1707185870727,"stop":1707185870727,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"users","time":{"start":1707187625742,"stop":1707187625742,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false}],"afterStages":[{"name":"client::0","time":{"start":1707187649776,"stop":1707187649777,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false}],"labels":[{"name":"parentSuite","value":"tests.staging"},{"name":"suite","value":"test_staging"},{"name":"subSuite","value":"TestGetMetroList"},{"name":"host","value":"fv-az612-514"},{"name":"thread","value":"2211-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.staging.test_staging"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"user","value":"<User.SUPERUSER: 'superuser'>"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"94d2528478013c79.json","parameterValues":["<User.SUPERUSER: 'superuser'>"]}