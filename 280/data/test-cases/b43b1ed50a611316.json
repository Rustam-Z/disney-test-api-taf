{"uid":"b43b1ed50a611316","name":"test_getOrders_withWrongDriver_returns400AndError[User.SUPERUSER]","fullName":"tests.driver_process.test_driver_process.TestGetOrders#test_getOrders_withWrongDriver_returns400AndError","historyId":"31ac5d4edd0c9d4acf0b7c79f5a077a7","time":{"start":1708052121353,"stop":1708052121421,"duration":68},"status":"failed","statusMessage":"AssertionError: Status code is different than expected. Actual: 200, expected: 400. Response payload: {\"status\":true,\"message\":\"Successfully\",\"data\":{\"count\":0,\"next\":null,\"previous\":null,\"results\":[]},\"error\":null}","statusTrace":"self = <test_driver_process.TestGetOrders object at 0x7f37053f8610>\nclient = <core.http_client.HTTPClient object at 0x7f370526c490>\nuser = <User.SUPERUSER: 'superuser'>\n\n    @users(User.SUPERUSER)\n    def test_getOrders_withWrongDriver_returns400AndError(self, client, user):\n        # Arrange\n        current_time = datetime.now().strftime('%Y-%m-%dT%H:%M:%S.%fZ')\n    \n        params = {\n            'action': 'pickup_at_facility',\n            'date_start_time_utc': current_time,\n            'driver_id': data.fake.pyint(),\n        }\n    \n        # Act\n        response, model = DriverProcessAPI(client).get_orders(params)\n    \n        # Assert\n>       APIResponse(response).assert_status(400)\n\ntests/driver_process/test_driver_process.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <core.asserters.APIResponse object at 0x7f37051459d0>, status_code = 400\n\n    def assert_status(self, status_code: int):\n>       assert self.response.status_code == status_code, \\\n            f'{AssertionMessage.WRONG_STATUS_CODE.value} ' \\\n            f'Actual: {self.response.status_code}, ' \\\n            f'expected: {status_code}. ' \\\n            f'Response payload: {self.body_str()}'\nE       AssertionError: Status code is different than expected. Actual: 200, expected: 400. Response payload: {\"status\":true,\"message\":\"Successfully\",\"data\":{\"count\":0,\"next\":null,\"previous\":null,\"results\":[]},\"error\":null}\n\ncore/asserters.py:25: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1708049870491,"stop":1708049870505,"duration":14},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"client","time":{"start":1708049870506,"stop":1708049870506,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"users","time":{"start":1708052121352,"stop":1708052121352,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"client::0","time":{"start":1708052199696,"stop":1708052199697,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests.driver_process"},{"name":"suite","value":"test_driver_process"},{"name":"subSuite","value":"TestGetOrders"},{"name":"host","value":"fv-az438-534"},{"name":"thread","value":"2215-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.driver_process.test_driver_process"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"user","value":"<User.SUPERUSER: 'superuser'>"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"b43b1ed50a611316.json","parameterValues":["<User.SUPERUSER: 'superuser'>"]}