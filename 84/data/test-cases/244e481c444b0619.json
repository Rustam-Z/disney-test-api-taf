{"uid":"244e481c444b0619","name":"test_getCurrentInventory_withItemTypes_returns200AndData[User.SUPERUSER]","fullName":"tests.dashboards.test_inventory.TestGetCurrentInventory#test_getCurrentInventory_withItemTypes_returns200AndData","historyId":"7538195877adc435118aec55fed0ace4","time":{"start":1691116001735,"stop":1691116002044,"duration":309},"status":"broken","statusMessage":"AttributeError: 'NoneType' object has no attribute 'id'","statusTrace":"self = <test_inventory.TestGetCurrentInventory object at 0x7efcad1120d0>\nclient = <core.http_client.HTTPClient object at 0x7efcae3e4990>\nuser = <User.SUPERUSER: 'superuser'>\ncreate_fake_facility = <function create_fake_facility.<locals>._fixture at 0x7efcae48f240>\ncreate_fake_cart_superuser = <function create_fake_cart_superuser.<locals>._fixture at 0x7efcae48ff60>\n\n    @users(User.SUPERUSER)\n    def test_getCurrentInventory_withItemTypes_returns200AndData(\n        self, client, user,\n        create_fake_facility,\n        create_fake_cart_superuser\n    ):\n        # Arrange\n        facility_payload, facility_response, facility_model = create_fake_facility()\n        facility_id = facility_model.data.id\n>       cart_payload, cart_response, cart_model = create_fake_cart_superuser(facility_id=facility_id)\n\ntests/dashboards/test_inventory.py:71: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nkwargs = {'facility_id': 740}, facility_id = 740\ncategory_payload = {'name': 'Jon Moore'}, category_response = <Response [201]>\ncategory_model = CreateInventoryCategorySuccessResponse(status=True, message='Successfully', data=_InventoryCategory(id=241, name='Jon ...ated_by=_UserField(id=1, email='admin@disney.com'), updated_by=_UserField(id=1, email='admin@disney.com')), error=None)\n\n    def _fixture(**kwargs):\n        # Arrange\n    \n        # Create facility\n        if 'facility_id' not in kwargs:\n            facility_payload, facility_response, facility_model = create_fake_facility(no_of_customers=1)\n            kwargs['facility_id'] = facility_model.data.id\n        facility_id = kwargs['facility_id']\n    \n        # Create inventory category\n        category_payload = data.fake.model.inventory_category()\n        category_response, category_model = InventoryCategoryAPI(client).create_category(data=category_payload)\n        nonlocal category_id\n        category_id = category_model.data.id\n    \n        # Create inventory item type\n        inventory_item_type_payload = data.fake.model.inventory_item_type(category_id=category_id)\n        inventory_item_type_response, inventory_item_type_model = InventoryItemTypeAPI(client).create_item_type(\n            data=inventory_item_type_payload\n        )\n        nonlocal inventory_item_type_id\n        inventory_item_type_id = inventory_item_type_model.data.id\n    \n        # Create facility item type\n        payload = data.fake.model.facility_item_type(item_type_id=inventory_item_type_id, facility_id=facility_id)\n        response, model = FacilityItemTypeAPI(client).create_item_type(data=payload)\n        nonlocal facility_item_type_id\n        facility_item_type_id = model.data.id\n    \n        # Create metro item configuration\n        payload = data.fake.model.metro_item_configuration(\n            facility_id=facility_id,\n            facility_item_type_ids=[facility_item_type_id],\n        )\n        response, conf_model = MetroItemConfigurationAPI(client).create_config(data=payload)\n        nonlocal metro_item_config_id\n>       metro_item_config_id = conf_model.data.id\nE       AttributeError: 'NoneType' object has no attribute 'id'\n\nfixtures/cart_build.py:56: AttributeError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":3,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1691115984544,"stop":1691115984557,"duration":13},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"client","time":{"start":1691115984557,"stop":1691115984558,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"users","time":{"start":1691116001734,"stop":1691116001734,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"create_fake_cart_superuser","time":{"start":1691116001735,"stop":1691116001735,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"create_fake_facility","time":{"start":1691116001735,"stop":1691116001735,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"afterStages":[{"name":"create_fake_cart_superuser::0","time":{"start":1691116002050,"stop":1691116002335,"duration":285},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"create_fake_facility::0","time":{"start":1691116002335,"stop":1691116002439,"duration":104},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"client::0","time":{"start":1691116219422,"stop":1691116219423,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"parentSuite","value":"tests.dashboards"},{"name":"suite","value":"test_inventory"},{"name":"subSuite","value":"TestGetCurrentInventory"},{"name":"host","value":"fv-az735-234"},{"name":"thread","value":"2268-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.dashboards.test_inventory"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"user","value":"<User.SUPERUSER: 'superuser'>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"3587dd3dbe4492a2","status":"broken","statusDetails":"AttributeError: 'NoneType' object has no attribute 'id'","time":{"start":1691116000988,"stop":1691116001310,"duration":322}},{"uid":"b5a233b80cb7c8c1","status":"broken","statusDetails":"AttributeError: 'NoneType' object has no attribute 'id'","time":{"start":1691116000168,"stop":1691116000494,"duration":326}},{"uid":"855a9a0ea157731f","status":"broken","statusDetails":"AttributeError: 'NoneType' object has no attribute 'id'","time":{"start":1691115999432,"stop":1691115999737,"duration":305}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":45,"unknown":0,"total":46},"items":[{"uid":"23953b9b15ef03c3","reportUrl":"https://Rustam-Z.github.io/disney-test-api-taf/83//#testresult/23953b9b15ef03c3","status":"passed","time":{"start":1691029537591,"stop":1691029538177,"duration":586}},{"uid":"8236a2ed069d220f","reportUrl":"https://Rustam-Z.github.io/disney-test-api-taf/82//#testresult/8236a2ed069d220f","status":"passed","time":{"start":1690943068399,"stop":1690943069440,"duration":1041}},{"uid":"d895ef136050088e","reportUrl":"https://Rustam-Z.github.io/disney-test-api-taf/81//#testresult/d895ef136050088e","status":"passed","time":{"start":1690857307503,"stop":1690857308451,"duration":948}},{"uid":"a3f671f2438915e3","reportUrl":"https://Rustam-Z.github.io/disney-test-api-taf/80//#testresult/a3f671f2438915e3","status":"passed","time":{"start":1690770595302,"stop":1690770596384,"duration":1082}},{"uid":"601c49a58c0e4093","reportUrl":"https://Rustam-Z.github.io/disney-test-api-taf/79//#testresult/601c49a58c0e4093","status":"passed","time":{"start":1690683992623,"stop":1690683993672,"duration":1049}},{"uid":"c8c18024ac45f692","reportUrl":"https://Rustam-Z.github.io/disney-test-api-taf/78//#testresult/c8c18024ac45f692","status":"passed","time":{"start":1690597459951,"stop":1690597460642,"duration":691}},{"uid":"6de72cf5f2677d7e","reportUrl":"https://Rustam-Z.github.io/disney-test-api-taf/77//#testresult/6de72cf5f2677d7e","status":"passed","time":{"start":1690511248760,"stop":1690511249515,"duration":755}},{"uid":"e268390c9cfee11","reportUrl":"https://Rustam-Z.github.io/disney-test-api-taf/76//#testresult/e268390c9cfee11","status":"passed","time":{"start":1690424672718,"stop":1690424673640,"duration":922}},{"uid":"dffdf61a2230b076","reportUrl":"https://Rustam-Z.github.io/disney-test-api-taf/75//#testresult/dffdf61a2230b076","status":"passed","time":{"start":1690338871812,"stop":1690338872825,"duration":1013}},{"uid":"866d7a52077b9573","reportUrl":"https://Rustam-Z.github.io/disney-test-api-taf/74//#testresult/866d7a52077b9573","status":"passed","time":{"start":1690253049758,"stop":1690253050308,"duration":550}},{"uid":"6164da9e934df68d","reportUrl":"https://Rustam-Z.github.io/disney-test-api-taf/73//#testresult/6164da9e934df68d","status":"passed","time":{"start":1690165965855,"stop":1690165966357,"duration":502}},{"uid":"e38b988559642243","reportUrl":"https://Rustam-Z.github.io/disney-test-api-taf/72//#testresult/e38b988559642243","status":"passed","time":{"start":1690079757927,"stop":1690079758644,"duration":717}},{"uid":"d0134e8c402ec65a","reportUrl":"https://Rustam-Z.github.io/disney-test-api-taf/71//#testresult/d0134e8c402ec65a","status":"passed","time":{"start":1689992994975,"stop":1689992995973,"duration":998}},{"uid":"2719b967b47ca53e","reportUrl":"https://Rustam-Z.github.io/disney-test-api-taf/70//#testresult/2719b967b47ca53e","status":"passed","time":{"start":1689906777959,"stop":1689906778538,"duration":579}},{"uid":"7ed829cdd7ee84be","reportUrl":"https://Rustam-Z.github.io/disney-test-api-taf/69//#testresult/7ed829cdd7ee84be","status":"passed","time":{"start":1689820248194,"stop":1689820248751,"duration":557}},{"uid":"4adff43363a6a1a0","reportUrl":"https://Rustam-Z.github.io/disney-test-api-taf/68//#testresult/4adff43363a6a1a0","status":"passed","time":{"start":1689738149383,"stop":1689738150152,"duration":769}},{"uid":"764953d90c55617b","reportUrl":"https://Rustam-Z.github.io/disney-test-api-taf/67//#testresult/764953d90c55617b","status":"passed","time":{"start":1689649094987,"stop":1689649095769,"duration":782}},{"uid":"f4509d618879e270","reportUrl":"https://Rustam-Z.github.io/disney-test-api-taf/66//#testresult/f4509d618879e270","status":"passed","time":{"start":1689562897268,"stop":1689562897949,"duration":681}},{"uid":"8cd2319fb9647d5b","reportUrl":"https://Rustam-Z.github.io/disney-test-api-taf/65//#testresult/8cd2319fb9647d5b","status":"passed","time":{"start":1689476855886,"stop":1689476856408,"duration":522}},{"uid":"e4691dd866451f0b","reportUrl":"https://Rustam-Z.github.io/disney-test-api-taf/64//#testresult/e4691dd866451f0b","status":"passed","time":{"start":1689389951620,"stop":1689389952142,"duration":522}}]},"tags":[]},"source":"244e481c444b0619.json","parameterValues":["<User.SUPERUSER: 'superuser'>"]}