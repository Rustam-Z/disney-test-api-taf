{"uid":"fef731fba42125c2","name":"test_getDailyInventory_withEmptyInventory_returns200AndData[User.SUPERUSER-monthly-item_type-delivered]","fullName":"tests.dashboards.test_inventory.TestGetDailyInventory#test_getDailyInventory_withEmptyInventory_returns200AndData","historyId":"a472eb0f42ac5de4f6e0eab7a75efe6c","time":{"start":1703731517608,"stop":1703731517671,"duration":63},"status":"broken","statusMessage":"AttributeError: 'NoneType' object has no attribute 'id'","statusTrace":"self = <test_inventory.TestGetDailyInventory object at 0x7f5b01495d50>\nclient = <core.http_client.HTTPClient object at 0x7f5b013ccfd0>\nuser = <User.SUPERUSER: 'superuser'>\ncreate_fake_facility = <function create_fake_facility.<locals>._fixture at 0x7f5b013adc60>\ndaily_inventory_type = 'delivered', inventory_base_filter = 'item_type'\nfrequency = 'monthly'\n\n    @pytest.mark.parametrize('daily_inventory_type', ['cart_build', 'delivered'])\n    @pytest.mark.parametrize('inventory_base_filter', ['metro_config', 'item_type'])\n    @pytest.mark.parametrize('frequency', ['daily', 'weekly', 'monthly'])\n    @users(User.SUPERUSER)\n    def test_getDailyInventory_withEmptyInventory_returns200AndData(\n        self, client, user,\n        create_fake_facility,\n        daily_inventory_type, inventory_base_filter, frequency\n    ):\n        # Arrange\n>       facility_payload, facility_response, facility_model = create_fake_facility()\n\ntests/dashboards/test_inventory.py:97: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nno_of_customers = 0, kwargs = {}\npayload = {'address_line1': '858 Gina Rest\\nWest Jesusville, RI 89679', 'address_line2': 'USNV Ryan\\nFPO AA 01661', 'city': 'North Bobby', 'country': 'Lesotho', ...}\nresponse = <Response [400]>\nmodel = ErrorResponse(status=False, message='Error', data=None, error={'name': ['facility with this name already exists.']})\n\n    def _fixture(no_of_customers: int = 0, **kwargs):\n        # Create customers\n        for _ in range(no_of_customers):\n            payload = data.fake.model.customer()  # Request body_str JSON\n            response, model = CustomerAPI(client).create_customer(data=payload)\n            customers.append(model.data.id)\n    \n        # Create facility\n        payload = data.fake.model.facility(customers=customers, **kwargs)  # Request body_str JSON\n        response, model = FacilityAPI(client).create_facility(data=payload)\n        nonlocal facility_id\n>       facility_id = model.data.id\nE       AttributeError: 'NoneType' object has no attribute 'id'\n\nfixtures/facility.py:24: AttributeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":3,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1703730119550,"stop":1703730119564,"duration":14},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"client","time":{"start":1703730119564,"stop":1703730119564,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"users","time":{"start":1703731517607,"stop":1703731517607,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"create_fake_facility","time":{"start":1703731517608,"stop":1703731517608,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"create_fake_facility::0","time":{"start":1703731517676,"stop":1703731517732,"duration":56},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"client::0","time":{"start":1703731615128,"stop":1703731615129,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests.dashboards"},{"name":"suite","value":"test_inventory"},{"name":"subSuite","value":"TestGetDailyInventory"},{"name":"host","value":"fv-az309-133"},{"name":"thread","value":"2138-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.dashboards.test_inventory"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"daily_inventory_type","value":"'delivered'"},{"name":"frequency","value":"'monthly'"},{"name":"inventory_base_filter","value":"'item_type'"},{"name":"user","value":"<User.SUPERUSER: 'superuser'>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"2c23ea86a1f4ce13","status":"broken","statusDetails":"ValueError: Response body is not a JSON object.","time":{"start":1703731277335,"stop":1703731517449,"duration":240114}},{"uid":"fc2f8c75e14072de","status":"broken","statusDetails":"ValueError: Response body is not a JSON object.","time":{"start":1703731037088,"stop":1703731277180,"duration":240092}},{"uid":"7f09b234c91a5306","status":"broken","statusDetails":"ValueError: Response body is not a JSON object.","time":{"start":1703730796792,"stop":1703731036892,"duration":240100}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":4,"unknown":0,"total":6},"items":[{"uid":"34f4be2f95839a54","reportUrl":"https://Rustam-Z.github.io/disney-test-api-taf/229//#testresult/34f4be2f95839a54","status":"broken","statusDetails":"ValueError: Response body is not a JSON object.","time":{"start":1703645115921,"stop":1703645356017,"duration":240096}},{"uid":"31ee570be23f3311","reportUrl":"https://Rustam-Z.github.io/disney-test-api-taf/228//#testresult/31ee570be23f3311","status":"passed","time":{"start":1703557955416,"stop":1703558192566,"duration":237150}},{"uid":"4f1b156cdaeae666","reportUrl":"https://Rustam-Z.github.io/disney-test-api-taf/227//#testresult/4f1b156cdaeae666","status":"passed","time":{"start":1703471776776,"stop":1703472006181,"duration":229405}},{"uid":"ba9e270b786afebb","reportUrl":"https://Rustam-Z.github.io/disney-test-api-taf/226//#testresult/ba9e270b786afebb","status":"passed","time":{"start":1703385363357,"stop":1703385588088,"duration":224731}},{"uid":"79b504380ca27455","reportUrl":"https://Rustam-Z.github.io/disney-test-api-taf/225//#testresult/79b504380ca27455","status":"passed","time":{"start":1703298620226,"stop":1703298838931,"duration":218705}}]},"tags":[]},"source":"fef731fba42125c2.json","parameterValues":["'delivered'","'monthly'","'item_type'","<User.SUPERUSER: 'superuser'>"]}