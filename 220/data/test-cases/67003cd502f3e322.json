{"uid":"67003cd502f3e322","name":"test_createCustomer_withExistingNameAndBarcode_returns400AndError[User.SUPERUSER-existing_data2-error2]","fullName":"tests.customer.test_customer.TestCreateCustomer#test_createCustomer_withExistingNameAndBarcode_returns400AndError","historyId":"779f1e95edbe2f32ce0d3cd71c683e09","time":{"start":1702866412612,"stop":1702866412729,"duration":117},"status":"failed","statusMessage":"AssertionError: assert {'name': ['customer with this name already exists.'], 'barcode': ['customer with this barcode already exists.']} == {'barcode': ['customer with this barcode already exists.']}\n  Common items:\n  {'barcode': ['customer with this barcode already exists.']}\n  Left contains 1 more item:\n  {'name': ['customer with this name already exists.']}\n  Full diff:\n    {\n     'barcode': ['customer with this barcode already exists.'],\n  +  'name': ['customer with this name already exists.'],\n    }","statusTrace":"self = <test_customer.TestCreateCustomer object at 0x7f4721f88c50>\nclient = <core.http_client.HTTPClient object at 0x7f4721e7e890>\nuser = <User.SUPERUSER: 'superuser'>\nexisting_data = {'barcode': '6986745589076'}\nerror = {'barcode': ['customer with this barcode already exists.']}\ncreate_fake_customer = <function create_fake_customer.<locals>._fixture at 0x7f4721e66fc0>\n\n    @pytest.mark.parametrize('existing_data, error', [\n        ({'name': data.fake.name(), 'barcode': data.fake.ean13()}, {\n            'name': ['customer with this name already exists.'],\n            'barcode': ['customer with this barcode already exists.']\n        }),\n        ({'name': data.fake.name()}, {\n            'name': ['customer with this name already exists.']\n        }),\n        ({'barcode': data.fake.ean13()}, {\n            'barcode': ['customer with this barcode already exists.']\n        }),\n    ])\n    @users(User.SUPERUSER)\n    def test_createCustomer_withExistingNameAndBarcode_returns400AndError(\n        self, client, user, existing_data, error, create_fake_customer\n    ):\n        # Arrange\n        create_fake_customer(**existing_data)\n    \n        # Act\n        request_payload = data.fake.model.customer(**existing_data)\n        response, model = CustomerAPI(client).create_customer(data=request_payload)\n    \n        # Assert\n        APIResponse(response).assert_status(400)\n>       assert model.error == error\nE       AssertionError: assert {'name': ['customer with this name already exists.'], 'barcode': ['customer with this barcode already exists.']} == {'barcode': ['customer with this barcode already exists.']}\nE         Common items:\nE         {'barcode': ['customer with this barcode already exists.']}\nE         Left contains 1 more item:\nE         {'name': ['customer with this name already exists.']}\nE         Full diff:\nE           {\nE            'barcode': ['customer with this barcode already exists.'],\nE         +  'name': ['customer with this name already exists.'],\nE           }\n\ntests/customer/test_customer.py:77: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1702866411330,"stop":1702866411347,"duration":17},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"client","time":{"start":1702866411347,"stop":1702866411347,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"create_fake_customer","time":{"start":1702866412611,"stop":1702866412611,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"users","time":{"start":1702866412611,"stop":1702866412611,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"create_fake_customer::0","time":{"start":1702866412786,"stop":1702866412875,"duration":89},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"client::0","time":{"start":1702867318700,"stop":1702867318702,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests.customer"},{"name":"suite","value":"test_customer"},{"name":"subSuite","value":"TestCreateCustomer"},{"name":"host","value":"fv-az440-810"},{"name":"thread","value":"2362-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.customer.test_customer"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"error","value":"{'barcode': ['customer with this barcode already exists.']}"},{"name":"existing_data","value":"{'barcode': '6986745589076'}"},{"name":"user","value":"<User.SUPERUSER: 'superuser'>"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"67003cd502f3e322.json","parameterValues":["{'barcode': ['customer with this barcode already exists.']}","{'barcode': '6986745589076'}","<User.SUPERUSER: 'superuser'>"]}