{"uid":"ab2e8175ba3faaac","name":"test_getUnassignedOrders_withNotExistingFacility_returns400AndError[User.SUPERUSER]","fullName":"tests.order.test_driver_assignment.TestGetUnassignedOrders#test_getUnassignedOrders_withNotExistingFacility_returns400AndError","historyId":"1befe6020f3e21ddacedbc1913309cbc","time":{"start":1699151635154,"stop":1699151635280,"duration":126},"status":"failed","statusMessage":"AssertionError: Status code is different than expected. Actual: 200, expected: 400. Response payload: {\"status\":true,\"message\":\"Successfully\",\"data\":{\"results\":[]},\"error\":null}","statusTrace":"self = <test_driver_assignment.TestGetUnassignedOrders object at 0x7f801ed9c4d0>\nclient = <core.http_client.HTTPClient object at 0x7f801ed02290>\nuser = <User.SUPERUSER: 'superuser'>\n\n    @users(User.SUPERUSER)\n    def test_getUnassignedOrders_withNotExistingFacility_returns400AndError(self, client, user):\n        # Arrange\n        current_time = datetime.now().strftime('%Y-%m-%dT%H:%M:%S.%fZ')\n        params = {\n            Param.DATE_START_TIME_UTC.value: current_time,\n            Param.FACILITY.value: data.fake.pyint()  # Not existing facility\n        }\n    \n        # Act\n        response, model = DriverAssignmentAPI(client).get_unassigned_orders(params=params)\n    \n        # Assert\n>       APIResponse(response).assert_status(400)\n\ntests/order/test_driver_assignment.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <core.asserters.APIResponse object at 0x7f801e833b90>, status_code = 400\n\n    def assert_status(self, status_code: int):\n>       assert self.response.status_code == status_code, \\\n            f'{AssertionMessage.WRONG_STATUS_CODE.value} ' \\\n            f'Actual: {self.response.status_code}, ' \\\n            f'expected: {status_code}. ' \\\n            f'Response payload: {self.body_str()}'\nE       AssertionError: Status code is different than expected. Actual: 200, expected: 400. Response payload: {\"status\":true,\"message\":\"Successfully\",\"data\":{\"results\":[]},\"error\":null}\n\ncore/asserters.py:25: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1699150997789,"stop":1699150997808,"duration":19},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"client","time":{"start":1699150997809,"stop":1699150997809,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"users","time":{"start":1699151635153,"stop":1699151635153,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"afterStages":[{"name":"client::0","time":{"start":1699151703889,"stop":1699151703890,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"parentSuite","value":"tests.order"},{"name":"suite","value":"test_driver_assignment"},{"name":"subSuite","value":"TestGetUnassignedOrders"},{"name":"host","value":"fv-az573-947"},{"name":"thread","value":"2420-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.order.test_driver_assignment"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"user","value":"<User.SUPERUSER: 'superuser'>"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"ab2e8175ba3faaac.json","parameterValues":["<User.SUPERUSER: 'superuser'>"]}