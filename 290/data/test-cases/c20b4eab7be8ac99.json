{"uid":"c20b4eab7be8ac99","name":"test_getOrders_forFacilityWithInvalidFacility_returns400AndError[User.SUPERUSER]","fullName":"tests.staging.test_staging.TestGetOrders#test_getOrders_forFacilityWithInvalidFacility_returns400AndError","historyId":"b50a91e8c656cb39c6885b0585203dac","time":{"start":1708916733235,"stop":1708916733354,"duration":119},"status":"failed","statusMessage":"AssertionError: Status code is different than expected. Actual: 200, expected: 400. Response payload: {\"status\":true,\"message\":\"Successfully\",\"data\":{\"count\":0,\"next\":null,\"previous\":null,\"results\":[]},\"error\":null}","statusTrace":"self = <test_staging.TestGetOrders object at 0x7f8bc76e7450>\nclient = <core.http_client.HTTPClient object at 0x7f8bc776a510>\nuser = <User.SUPERUSER: 'superuser'>\n\n    @users(User.SUPERUSER)\n    def test_getOrders_forFacilityWithInvalidFacility_returns400AndError(self, client, user):\n        # Arrange\n        params = {\n            Param.FACILITY.value: data.fake.pyint()\n        }\n    \n        # Act\n        response, model = StagingAPI(client).get_orders(params)\n    \n        # Assert\n>       APIResponse(response).assert_status(400)\n\ntests/staging/test_staging.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <core.asserters.APIResponse object at 0x7f8bc72e91d0>, status_code = 400\n\n    def assert_status(self, status_code: int):\n>       assert self.response.status_code == status_code, \\\n            f'{AssertionMessage.WRONG_STATUS_CODE.value} ' \\\n            f'Actual: {self.response.status_code}, ' \\\n            f'expected: {status_code}. ' \\\n            f'Response payload: {self.body_str()}'\nE       AssertionError: Status code is different than expected. Actual: 200, expected: 400. Response payload: {\"status\":true,\"message\":\"Successfully\",\"data\":{\"count\":0,\"next\":null,\"previous\":null,\"results\":[]},\"error\":null}\n\ncore/asserters.py:25: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1708914084771,"stop":1708914084788,"duration":17},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"client","time":{"start":1708914084789,"stop":1708914084789,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"users","time":{"start":1708916733235,"stop":1708916733235,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"client::0","time":{"start":1708916783356,"stop":1708916783357,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests.staging"},{"name":"suite","value":"test_staging"},{"name":"subSuite","value":"TestGetOrders"},{"name":"host","value":"fv-az471-953"},{"name":"thread","value":"2171-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.staging.test_staging"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"user","value":"<User.SUPERUSER: 'superuser'>"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"c20b4eab7be8ac99.json","parameterValues":["<User.SUPERUSER: 'superuser'>"]}