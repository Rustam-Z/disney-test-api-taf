{"uid":"638c9b64c5a5e7cd","name":"test_getDailyInventory_withEmptyInventory_returns200AndData[User.SUPERUSER-monthly-item_type-delivered]","fullName":"tests.dashboards.test_inventory.TestGetDailyInventory#test_getDailyInventory_withEmptyInventory_returns200AndData","historyId":"a472eb0f42ac5de4f6e0eab7a75efe6c","time":{"start":1707706308165,"stop":1707706308221,"duration":56},"status":"broken","statusMessage":"AttributeError: 'NoneType' object has no attribute 'id'","statusTrace":"self = <test_inventory.TestGetDailyInventory object at 0x7f0c2608aa10>\nclient = <core.http_client.HTTPClient object at 0x7f0c25fc43d0>\nuser = <User.SUPERUSER: 'superuser'>\ncreate_fake_facility = <function create_fake_facility.<locals>._fixture at 0x7f0c25fe0860>\ndaily_inventory_type = 'delivered', inventory_base_filter = 'item_type'\nfrequency = 'monthly'\n\n    @pytest.mark.parametrize('daily_inventory_type', ['cart_build', 'delivered'])\n    @pytest.mark.parametrize('inventory_base_filter', ['metro_config', 'item_type'])\n    @pytest.mark.parametrize('frequency', ['daily', 'weekly', 'monthly'])\n    @users(User.SUPERUSER)\n    def test_getDailyInventory_withEmptyInventory_returns200AndData(\n        self, client, user,\n        create_fake_facility,\n        daily_inventory_type, inventory_base_filter, frequency\n    ):\n        # Arrange\n>       facility_payload, facility_response, facility_model = create_fake_facility()\n\ntests/dashboards/test_inventory.py:97: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nno_of_customers = 0, kwargs = {}\npayload = {'address_line1': '72184 Anderson Creek\\nWest Donna, AL 52818', 'address_line2': '417 Devon Junctions\\nJoannebury, PR 10706', 'city': 'Andrewview', 'country': 'Liberia', ...}\nresponse = <Response [400]>\nmodel = ErrorResponse(status=False, message='Error', data=None, error={'name': ['facility with this name already exists.']})\n\n    def _fixture(no_of_customers: int = 0, **kwargs):\n        # Create customers\n        for _ in range(no_of_customers):\n            payload = data.fake.model.customer()  # Request body_str JSON\n            response, model = CustomerAPI(client).create_customer(data=payload)\n            customers.append(model.data.id)\n    \n        # Create facility\n        payload = data.fake.model.facility(customers=customers, **kwargs)  # Request body_str JSON\n        response, model = FacilityAPI(client).create_facility(data=payload)\n        nonlocal facility_id\n>       facility_id = model.data.id\nE       AttributeError: 'NoneType' object has no attribute 'id'\n\nfixtures/facility.py:24: AttributeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":3,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1707704341068,"stop":1707704341083,"duration":15},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"client","time":{"start":1707704341083,"stop":1707704341083,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"create_fake_facility","time":{"start":1707706308164,"stop":1707706308165,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"users","time":{"start":1707706308164,"stop":1707706308164,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false}],"afterStages":[{"name":"create_fake_facility::0","time":{"start":1707706308228,"stop":1707706308282,"duration":54},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"client::0","time":{"start":1707706400325,"stop":1707706400327,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false}],"labels":[{"name":"parentSuite","value":"tests.dashboards"},{"name":"suite","value":"test_inventory"},{"name":"subSuite","value":"TestGetDailyInventory"},{"name":"host","value":"fv-az189-554"},{"name":"thread","value":"2175-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.dashboards.test_inventory"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"daily_inventory_type","value":"'delivered'"},{"name":"frequency","value":"'monthly'"},{"name":"inventory_base_filter","value":"'item_type'"},{"name":"user","value":"<User.SUPERUSER: 'superuser'>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"895321fcd240090b","status":"broken","statusDetails":"ValueError: Response body is not a JSON object.","time":{"start":1707706067920,"stop":1707706308013,"duration":240093}},{"uid":"e2a10bc841f140a3","status":"broken","statusDetails":"ValueError: Response body is not a JSON object.","time":{"start":1707705827673,"stop":1707706067761,"duration":240088}},{"uid":"61d03717fb6c5a51","status":"broken","statusDetails":"ValueError: Response body is not a JSON object.","time":{"start":1707705587413,"stop":1707705827512,"duration":240099}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":4,"skipped":0,"passed":0,"unknown":0,"total":4},"items":[{"uid":"2e942818fff2bd30","reportUrl":"https://Rustam-Z.github.io/disney-test-api-taf/275//#testresult/2e942818fff2bd30","status":"broken","statusDetails":"ValueError: Response body is not a JSON object.","time":{"start":1707619305193,"stop":1707619545395,"duration":240202}},{"uid":"9c1abb275dcdcb88","reportUrl":"https://Rustam-Z.github.io/disney-test-api-taf/274//#testresult/9c1abb275dcdcb88","status":"broken","statusDetails":"ValueError: Response body is not a JSON object.","time":{"start":1707532817282,"stop":1707533057363,"duration":240081}},{"uid":"8b8a7fd97dc64a0e","reportUrl":"https://Rustam-Z.github.io/disney-test-api-taf/273//#testresult/8b8a7fd97dc64a0e","status":"broken","statusDetails":"ValueError: Response body is not a JSON object.","time":{"start":1707446286156,"stop":1707446526241,"duration":240085}}]},"tags":[]},"source":"638c9b64c5a5e7cd.json","parameterValues":["'delivered'","'monthly'","'item_type'","<User.SUPERUSER: 'superuser'>"]}