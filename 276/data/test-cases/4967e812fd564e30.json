{"uid":"4967e812fd564e30","name":"test_getCurrentInventory_withEmptyInventory_returns200AndData[User.SUPERUSER-metro_config-Metro Configurations]","fullName":"tests.dashboards.test_inventory.TestGetCurrentInventory#test_getCurrentInventory_withEmptyInventory_returns200AndData","historyId":"36a27e0f28b363ee96b7022a03e8bf7c","time":{"start":1707704351935,"stop":1707704351986,"duration":51},"status":"broken","statusMessage":"AttributeError: 'NoneType' object has no attribute 'id'","statusTrace":"self = <test_inventory.TestGetCurrentInventory object at 0x7f0c24e1d050>\nclient = <core.http_client.HTTPClient object at 0x7f0c25fc43d0>\nuser = <User.SUPERUSER: 'superuser'>\ncreate_fake_facility = <function create_fake_facility.<locals>._fixture at 0x7f0c25b71bc0>\nbase_filter = 'metro_config', name = 'Metro Configurations'\n\n    @pytest.mark.parametrize('base_filter, name', [\n        ('item_type', 'Item Types'),\n        ('metro_config', 'Metro Configurations')\n    ])\n    @users(User.SUPERUSER)\n    def test_getCurrentInventory_withEmptyInventory_returns200AndData(\n        self,\n        client, user, create_fake_facility,\n        base_filter, name\n    ):\n        # Arrange\n>       setup_payload, setup_response, setup_model = create_fake_facility()\n\ntests/dashboards/test_inventory.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nno_of_customers = 0, kwargs = {}\npayload = {'address_line1': '71804 Boyer Mountains Suite 683\\nPort Jessicatown, NV 34969', 'address_line2': '503 Doyle Mountain Suite 981\\nMichellehaven, RI 61452', 'city': 'Port Kristinaview', 'country': 'Northern Mariana Islands', ...}\nresponse = <Response [400]>\nmodel = ErrorResponse(status=False, message='Error', data=None, error={'name': ['facility with this name already exists.']})\n\n    def _fixture(no_of_customers: int = 0, **kwargs):\n        # Create customers\n        for _ in range(no_of_customers):\n            payload = data.fake.model.customer()  # Request body_str JSON\n            response, model = CustomerAPI(client).create_customer(data=payload)\n            customers.append(model.data.id)\n    \n        # Create facility\n        payload = data.fake.model.facility(customers=customers, **kwargs)  # Request body_str JSON\n        response, model = FacilityAPI(client).create_facility(data=payload)\n        nonlocal facility_id\n>       facility_id = model.data.id\nE       AttributeError: 'NoneType' object has no attribute 'id'\n\nfixtures/facility.py:24: AttributeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1707704341068,"stop":1707704341083,"duration":15},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"client","time":{"start":1707704341083,"stop":1707704341083,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"create_fake_facility","time":{"start":1707704351934,"stop":1707704351934,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"users","time":{"start":1707704351934,"stop":1707704351934,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false}],"afterStages":[{"name":"create_fake_facility::0","time":{"start":1707704351993,"stop":1707704352041,"duration":48},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"client::0","time":{"start":1707706400325,"stop":1707706400327,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false}],"labels":[{"name":"parentSuite","value":"tests.dashboards"},{"name":"suite","value":"test_inventory"},{"name":"subSuite","value":"TestGetCurrentInventory"},{"name":"host","value":"fv-az189-554"},{"name":"thread","value":"2175-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.dashboards.test_inventory"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_filter","value":"'metro_config'"},{"name":"name","value":"'Metro Configurations'"},{"name":"user","value":"<User.SUPERUSER: 'superuser'>"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"4967e812fd564e30.json","parameterValues":["'metro_config'","'Metro Configurations'","<User.SUPERUSER: 'superuser'>"]}