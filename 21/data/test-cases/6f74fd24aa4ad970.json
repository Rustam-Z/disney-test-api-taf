{"uid":"6f74fd24aa4ad970","name":"test_createCustomer_withValidData_returns201AndData[User.SUPERUSER]","fullName":"tests.customer.test_customer.TestCreateCustomer#test_createCustomer_withValidData_returns201AndData","historyId":"4cb166cde80077a8758f651eae1e4aac","time":{"start":1685686675984,"stop":1685686676106,"duration":122},"status":"failed","statusMessage":"AssertionError: Status code is different than expected. Actual: 400, expected: 201. Response payload: {\"status\":false,\"message\":\"Error\",\"data\":null,\"error\":{\"name\":[\"customer with this name already exists.\"]}}","statusTrace":"self = <test_customer.TestCreateCustomer object at 0x7fdcd18cfa90>\nclient = <core.http_client.HTTPClient object at 0x7fdcd0f80710>\nuser = <User.SUPERUSER: 'superuser'>\nrequest = <FixtureRequest for <Function test_createCustomer_withValidData_returns201AndData[User.SUPERUSER]>>\n\n    @users(User.SUPERUSER)\n    def test_createCustomer_withValidData_returns201AndData(self, client, user, request):\n        # Arrange\n        payload = data.fake.model.customer()\n    \n        # Act\n        response, model = CustomerAPI(client).create_customer(data=payload)\n    \n        # Assert\n>       APIResponse(response).assert_status(201)\n\ntests/customer/test_customer.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <core.asserters.APIResponse object at 0x7fdcd0502590>, status_code = 201\n\n    def assert_status(self, status_code: int):\n>       assert self.response.status_code == status_code, \\\n            f'{AssertionMessage.WRONG_STATUS_CODE.value} ' \\\n            f'Actual: {self.response.status_code}, ' \\\n            f'expected: {status_code}. ' \\\n            f'Response payload: {self.body_str()}'\nE       AssertionError: Status code is different than expected. Actual: 400, expected: 201. Response payload: {\"status\":false,\"message\":\"Error\",\"data\":null,\"error\":{\"name\":[\"customer with this name already exists.\"]}}\n\ncore/asserters.py:25: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1685686675311,"stop":1685686675325,"duration":14},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"client","time":{"start":1685686675325,"stop":1685686675325,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"users","time":{"start":1685686675326,"stop":1685686675983,"duration":657},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"afterStages":[{"name":"client::0","time":{"start":1685686789507,"stop":1685686789508,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"parentSuite","value":"tests.customer"},{"name":"suite","value":"test_customer"},{"name":"subSuite","value":"TestCreateCustomer"},{"name":"host","value":"fv-az950-900"},{"name":"thread","value":"2448-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.customer.test_customer"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"user","value":"<User.SUPERUSER: 'superuser'>"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"6f74fd24aa4ad970.json","parameterValues":["<User.SUPERUSER: 'superuser'>"]}