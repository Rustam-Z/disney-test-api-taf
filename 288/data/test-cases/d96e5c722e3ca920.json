{"uid":"d96e5c722e3ca920","name":"test_getCurrentInventory_withEmptyInventory_returns200AndData[User.SUPERUSER-item_type-Item Types]","fullName":"tests.dashboards.test_inventory.TestGetCurrentInventory#test_getCurrentInventory_withEmptyInventory_returns200AndData","historyId":"1f4895c9b1f156914b63b814fa0d95c6","time":{"start":1708740931265,"stop":1708740931378,"duration":113},"status":"broken","statusMessage":"AttributeError: 'NoneType' object has no attribute 'id'","statusTrace":"self = <test_inventory.TestGetCurrentInventory object at 0x7f68ee8f2d10>\nclient = <core.http_client.HTTPClient object at 0x7f68ee342e50>\nuser = <User.SUPERUSER: 'superuser'>\ncreate_fake_facility = <function create_fake_facility.<locals>._fixture at 0x7f68ee20b100>\nbase_filter = 'item_type', name = 'Item Types'\n\n    @pytest.mark.parametrize('base_filter, name', [\n        ('item_type', 'Item Types'),\n        ('metro_config', 'Metro Configurations')\n    ])\n    @users(User.SUPERUSER)\n    def test_getCurrentInventory_withEmptyInventory_returns200AndData(\n        self,\n        client, user, create_fake_facility,\n        base_filter, name\n    ):\n        # Arrange\n>       setup_payload, setup_response, setup_model = create_fake_facility()\n\ntests/dashboards/test_inventory.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nno_of_customers = 0, kwargs = {}\npayload = {'address_line1': '3130 Ford Ridges\\nPort Bradtown, ID 19007', 'address_line2': '284 Andrea Run\\nWest Micheleside, WY 70477', 'city': 'Michealshire', 'country': 'New Zealand', ...}\nresponse = <Response [400]>\nmodel = ErrorResponse(status=False, message='Error', data=None, error={'name': ['facility with this name already exists.']})\n\n    def _fixture(no_of_customers: int = 0, **kwargs):\n        # Create customers\n        for _ in range(no_of_customers):\n            payload = data.fake.model.customer()  # Request body_str JSON\n            response, model = CustomerAPI(client).create_customer(data=payload)\n            customers.append(model.data.id)\n    \n        # Create facility\n        payload = data.fake.model.facility(customers=customers, **kwargs)  # Request body_str JSON\n        response, model = FacilityAPI(client).create_facility(data=payload)\n        nonlocal facility_id\n>       facility_id = model.data.id\nE       AttributeError: 'NoneType' object has no attribute 'id'\n\nfixtures/facility.py:24: AttributeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1708740912461,"stop":1708740912479,"duration":18},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"client","time":{"start":1708740912479,"stop":1708740912480,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"users","time":{"start":1708740931264,"stop":1708740931265,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"create_fake_facility","time":{"start":1708740931265,"stop":1708740931265,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false}],"afterStages":[{"name":"create_fake_facility::0","time":{"start":1708740931384,"stop":1708740931499,"duration":115},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"client::0","time":{"start":1708743562608,"stop":1708743562609,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false}],"labels":[{"name":"parentSuite","value":"tests.dashboards"},{"name":"suite","value":"test_inventory"},{"name":"subSuite","value":"TestGetCurrentInventory"},{"name":"host","value":"fv-az454-735"},{"name":"thread","value":"2192-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.dashboards.test_inventory"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_filter","value":"'item_type'"},{"name":"name","value":"'Item Types'"},{"name":"user","value":"<User.SUPERUSER: 'superuser'>"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"d96e5c722e3ca920.json","parameterValues":["'item_type'","'Item Types'","<User.SUPERUSER: 'superuser'>"]}