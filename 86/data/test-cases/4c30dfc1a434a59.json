{"uid":"4c30dfc1a434a59","name":"test_deleteMetroItemConfigBySuperuser_byValidID_returns404[User.SUPERUSER]","fullName":"tests.metro.test_metro_item_configuration.TestDeleteMetroItemTypeConfiguration#test_deleteMetroItemConfigBySuperuser_byValidID_returns404","historyId":"e96bef755ce359c3b95ec6352f6327ca","time":{"start":1691288621632,"stop":1691288621694,"duration":62},"status":"failed","statusMessage":"AssertionError: Status code is different than expected. Actual: 400, expected: 404. Response payload: {\"status\": false, \"message\": \"Error\", \"data\": null, \"error\": {\"detail\": \"There is no such menu route available.\"}}","statusTrace":"self = <test_metro_item_configuration.TestDeleteMetroItemTypeConfiguration object at 0x7f6b60e74290>\nclient = <core.http_client.HTTPClient object at 0x7f6b620b52d0>\nuser = <User.SUPERUSER: 'superuser'>\n\n    @users(User.SUPERUSER)\n    def test_deleteMetroItemConfigBySuperuser_byValidID_returns404(self, client, user):\n        # Arrange\n        not_existing_id = data.fake.uuid4()\n    \n        # Act\n        response, model = MetroItemConfigurationAPI(client).delete_config(id=not_existing_id)\n    \n        # Assert\n>       APIResponse(response).assert_status(404)\n\ntests/metro/test_metro_item_configuration.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <core.asserters.APIResponse object at 0x7f6b6199e690>, status_code = 404\n\n    def assert_status(self, status_code: int):\n>       assert self.response.status_code == status_code, \\\n            f'{AssertionMessage.WRONG_STATUS_CODE.value} ' \\\n            f'Actual: {self.response.status_code}, ' \\\n            f'expected: {status_code}. ' \\\n            f'Response payload: {self.body_str()}'\nE       AssertionError: Status code is different than expected. Actual: 400, expected: 404. Response payload: {\"status\": false, \"message\": \"Error\", \"data\": null, \"error\": {\"detail\": \"There is no such menu route available.\"}}\n\ncore/asserters.py:25: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1691288432147,"stop":1691288432160,"duration":13},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0},{"name":"client","time":{"start":1691288432160,"stop":1691288432161,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0},{"name":"users","time":{"start":1691288621632,"stop":1691288621632,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0}],"afterStages":[{"name":"client::0","time":{"start":1691288709802,"stop":1691288709803,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0}],"labels":[{"name":"parentSuite","value":"tests.metro"},{"name":"suite","value":"test_metro_item_configuration"},{"name":"subSuite","value":"TestDeleteMetroItemTypeConfiguration"},{"name":"host","value":"fv-az450-495"},{"name":"thread","value":"2260-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.metro.test_metro_item_configuration"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"user","value":"<User.SUPERUSER: 'superuser'>"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"4c30dfc1a434a59.json","parameterValues":["<User.SUPERUSER: 'superuser'>"]}