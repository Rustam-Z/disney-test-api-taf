{"uid":"4eeaba163df53845","name":"test_getUnassignedOrders_withNoOrders_returns200AndData[User.SUPERUSER]","fullName":"tests.order.test_driver_assignment.TestGetUnassignedOrders#test_getUnassignedOrders_withNoOrders_returns200AndData","historyId":"5cb40a3004f44633e6f1039e809c7e80","time":{"start":1704336856821,"stop":1704336856940,"duration":119},"status":"broken","statusMessage":"AttributeError: 'NoneType' object has no attribute 'id'","statusTrace":"self = <test_driver_assignment.TestGetUnassignedOrders object at 0x7fb4156bdfd0>\nclient = <core.http_client.HTTPClient object at 0x7fb4156743d0>\nuser = <User.SUPERUSER: 'superuser'>\nrequest = <FixtureRequest for <Function test_getUnassignedOrders_withNoOrders_returns200AndData[User.SUPERUSER]>>\n\n    @users(User.SUPERUSER)\n    def test_getUnassignedOrders_withNoOrders_returns200AndData(self, client, user, request):\n        # Arrange\n>       payload, response, model = request.getfixturevalue('create_fake_facility')(no_of_customers=1)\n\ntests/order/test_driver_assignment.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nno_of_customers = 1, kwargs = {}, _ = 0\npayload = {'address_line1': 'USCGC Rice\\nFPO AP 04922', 'address_line2': '8384 Hughes Valley Apt. 445\\nNorth Carriehaven, AK 19695', 'barcode': '0613932522641', 'city': 'North Kellitown', ...}\nresponse = <Response [400]>\nmodel = ErrorResponse(status=False, message='Error', data=None, error={'name': ['customer with this name already exists.']})\n\n    def _fixture(no_of_customers: int = 0, **kwargs):\n        # Create customers\n        for _ in range(no_of_customers):\n            payload = data.fake.model.customer()  # Request body_str JSON\n            response, model = CustomerAPI(client).create_customer(data=payload)\n>           customers.append(model.data.id)\nE           AttributeError: 'NoneType' object has no attribute 'id'\n\nfixtures/facility.py:18: AttributeError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":3,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1704335101464,"stop":1704335101483,"duration":19},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"client","time":{"start":1704335101483,"stop":1704335101483,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"users","time":{"start":1704336856821,"stop":1704336856821,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"create_fake_facility","time":{"start":1704336856821,"stop":1704336856822,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"create_fake_facility::0","time":{"start":1704336856947,"stop":1704336857061,"duration":114},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"client::0","time":{"start":1704336929658,"stop":1704336929659,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests.order"},{"name":"suite","value":"test_driver_assignment"},{"name":"subSuite","value":"TestGetUnassignedOrders"},{"name":"host","value":"fv-az1250-16"},{"name":"thread","value":"2135-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.order.test_driver_assignment"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"user","value":"<User.SUPERUSER: 'superuser'>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"9da8adbf1b6bc552","status":"broken","statusDetails":"AttributeError: 'NoneType' object has no attribute 'id'","time":{"start":1704336856289,"stop":1704336856539,"duration":250}},{"uid":"bc682e2e3f38455a","status":"broken","statusDetails":"AttributeError: 'NoneType' object has no attribute 'id'","time":{"start":1704336856051,"stop":1704336856167,"duration":116}},{"uid":"25b2fd60fe29d3bb","status":"broken","statusDetails":"AttributeError: 'NoneType' object has no attribute 'id'","time":{"start":1704336855496,"stop":1704336855761,"duration":265}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":4,"unknown":0,"total":5},"items":[{"uid":"21837d18018eecec","reportUrl":"https://Rustam-Z.github.io/disney-test-api-taf/236//#testresult/21837d18018eecec","status":"passed","time":{"start":1704249627607,"stop":1704249627956,"duration":349}},{"uid":"ef3e697f3a728b14","reportUrl":"https://Rustam-Z.github.io/disney-test-api-taf/235//#testresult/ef3e697f3a728b14","status":"passed","time":{"start":1704163326117,"stop":1704163326426,"duration":309}},{"uid":"d83ab4650f6074dc","reportUrl":"https://Rustam-Z.github.io/disney-test-api-taf/234//#testresult/d83ab4650f6074dc","status":"passed","time":{"start":1704077159875,"stop":1704077160082,"duration":207}},{"uid":"18a41d953b9c7d68","reportUrl":"https://Rustam-Z.github.io/disney-test-api-taf/233//#testresult/18a41d953b9c7d68","status":"passed","time":{"start":1703990511692,"stop":1703990511909,"duration":217}}]},"tags":[]},"source":"4eeaba163df53845.json","parameterValues":["<User.SUPERUSER: 'superuser'>"]}