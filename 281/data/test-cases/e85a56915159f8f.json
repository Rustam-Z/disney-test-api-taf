{"uid":"e85a56915159f8f","name":"test_getDailyInventory_withEmptyInventory_returns200AndData[User.SUPERUSER-monthly-item_type-cart_build]","fullName":"tests.dashboards.test_inventory.TestGetDailyInventory#test_getDailyInventory_withEmptyInventory_returns200AndData","historyId":"8e0008e16ced5ed8b3064e01b2794efe","time":{"start":1708137469256,"stop":1708137469314,"duration":58},"status":"broken","statusMessage":"AttributeError: 'NoneType' object has no attribute 'id'","statusTrace":"self = <test_inventory.TestGetDailyInventory object at 0x7facc9b01ed0>\nclient = <core.http_client.HTTPClient object at 0x7facc95e2510>\nuser = <User.SUPERUSER: 'superuser'>\ncreate_fake_facility = <function create_fake_facility.<locals>._fixture at 0x7facc9585b20>\ndaily_inventory_type = 'cart_build', inventory_base_filter = 'item_type'\nfrequency = 'monthly'\n\n    @pytest.mark.parametrize('daily_inventory_type', ['cart_build', 'delivered'])\n    @pytest.mark.parametrize('inventory_base_filter', ['metro_config', 'item_type'])\n    @pytest.mark.parametrize('frequency', ['daily', 'weekly', 'monthly'])\n    @users(User.SUPERUSER)\n    def test_getDailyInventory_withEmptyInventory_returns200AndData(\n        self, client, user,\n        create_fake_facility,\n        daily_inventory_type, inventory_base_filter, frequency\n    ):\n        # Arrange\n>       facility_payload, facility_response, facility_model = create_fake_facility()\n\ntests/dashboards/test_inventory.py:97: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nno_of_customers = 0, kwargs = {}\npayload = {'address_line1': 'PSC 1785, Box 0316\\nAPO AP 46296', 'address_line2': '67496 Andrew Flats Apt. 549\\nNew Frederickside, NJ 72759', 'city': 'West Mariofurt', 'country': 'Tokelau', ...}\nresponse = <Response [400]>\nmodel = ErrorResponse(status=False, message='Error', data=None, error={'name': ['facility with this name already exists.']})\n\n    def _fixture(no_of_customers: int = 0, **kwargs):\n        # Create customers\n        for _ in range(no_of_customers):\n            payload = data.fake.model.customer()  # Request body_str JSON\n            response, model = CustomerAPI(client).create_customer(data=payload)\n            customers.append(model.data.id)\n    \n        # Create facility\n        payload = data.fake.model.facility(customers=customers, **kwargs)  # Request body_str JSON\n        response, model = FacilityAPI(client).create_facility(data=payload)\n        nonlocal facility_id\n>       facility_id = model.data.id\nE       AttributeError: 'NoneType' object has no attribute 'id'\n\nfixtures/facility.py:24: AttributeError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":3,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1708136192581,"stop":1708136192595,"duration":14},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"client","time":{"start":1708136192595,"stop":1708136192595,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"users","time":{"start":1708137469256,"stop":1708137469256,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"create_fake_facility","time":{"start":1708137469256,"stop":1708137469256,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"create_fake_facility::0","time":{"start":1708137469320,"stop":1708137469375,"duration":55},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"client::0","time":{"start":1708138519329,"stop":1708138519330,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests.dashboards"},{"name":"suite","value":"test_inventory"},{"name":"subSuite","value":"TestGetDailyInventory"},{"name":"host","value":"fv-az437-336"},{"name":"thread","value":"2185-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.dashboards.test_inventory"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"daily_inventory_type","value":"'cart_build'"},{"name":"frequency","value":"'monthly'"},{"name":"inventory_base_filter","value":"'item_type'"},{"name":"user","value":"<User.SUPERUSER: 'superuser'>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"39ddd1c9b227d043","status":"broken","statusDetails":"ValueError: Response body is not a JSON object.","time":{"start":1708137228997,"stop":1708137469093,"duration":240096}},{"uid":"2384b415548e88f1","status":"broken","statusDetails":"ValueError: Response body is not a JSON object.","time":{"start":1708136988748,"stop":1708137228848,"duration":240100}},{"uid":"155f2e05c76aadb0","status":"broken","statusDetails":"ValueError: Response body is not a JSON object.","time":{"start":1708136748486,"stop":1708136988576,"duration":240090}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":3,"skipped":0,"passed":6,"unknown":0,"total":9},"items":[{"uid":"88d85371ca4f952c","reportUrl":"https://Rustam-Z.github.io/disney-test-api-taf/280//#testresult/88d85371ca4f952c","status":"passed","time":{"start":1708050907782,"stop":1708051146870,"duration":239088}},{"uid":"88642cd4f4cbb3da","reportUrl":"https://Rustam-Z.github.io/disney-test-api-taf/279//#testresult/88642cd4f4cbb3da","status":"passed","time":{"start":1707964293680,"stop":1707964531528,"duration":237848}},{"uid":"2e276b2dd70d8ace","reportUrl":"https://Rustam-Z.github.io/disney-test-api-taf/278//#testresult/2e276b2dd70d8ace","status":"broken","statusDetails":"ValueError: Response body is not a JSON object.","time":{"start":1707878366971,"stop":1707878607061,"duration":240090}},{"uid":"5be45b937ec562d","reportUrl":"https://Rustam-Z.github.io/disney-test-api-taf/277//#testresult/5be45b937ec562d","status":"broken","statusDetails":"ValueError: Response body is not a JSON object.","time":{"start":1707791712369,"stop":1707791952450,"duration":240081}},{"uid":"2fc676310d08710b","reportUrl":"https://Rustam-Z.github.io/disney-test-api-taf/276//#testresult/2fc676310d08710b","status":"passed","time":{"start":1707705353639,"stop":1707705587292,"duration":233653}},{"uid":"9c8f1eb45738773a","reportUrl":"https://Rustam-Z.github.io/disney-test-api-taf/275//#testresult/9c8f1eb45738773a","status":"passed","time":{"start":1707618585092,"stop":1707618823907,"duration":238815}},{"uid":"ba044d84bfb6a5da","reportUrl":"https://Rustam-Z.github.io/disney-test-api-taf/274//#testresult/ba044d84bfb6a5da","status":"passed","time":{"start":1707531857770,"stop":1707532096429,"duration":238659}},{"uid":"889957d1a9856417","reportUrl":"https://Rustam-Z.github.io/disney-test-api-taf/273//#testresult/889957d1a9856417","status":"passed","time":{"start":1707445568908,"stop":1707445805388,"duration":236480}}]},"tags":[]},"source":"e85a56915159f8f.json","parameterValues":["'cart_build'","'monthly'","'item_type'","<User.SUPERUSER: 'superuser'>"]}